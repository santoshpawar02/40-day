

maintain the State/Track, delta of each release
helm the solution - package manager
create helm chart
deploy chart
helmchart templates

# ---------------------------------------------------------------------------- #
#                      helm the solution - package manager                     #
# ---------------------------------------------------------------------------- #
Helm is the de facto **package manager for Kubernetes**. It simplifies deploying and managing applications by packaging Kubernetes resources into **Helm Charts**. Think of it like `apt`, `yum`, or `npm` but for Kubernetes applications.

**Key Concepts (Brief):**

* **Chart:** A Helm chart is a collection of files that describe a related set of Kubernetes resources. It defines an application, tool, or service, and its dependencies.
* **Release:** When you install a Helm chart, it creates a "release." A release is a running instance of a chart on your Kubernetes cluster. Helm tracks these releases, allowing for easy upgrades, rollbacks, and management.
* **Repository:** A collection of packaged Helm charts. Helm can add and manage connections to these repositories.

**Why Helm in Production?**

1.  **Repeatable Deployments:** Define your application's Kubernetes manifests once in a chart. Deploy the exact same configuration across development, staging, and production environments. This reduces configuration drift and errors.
2.  **Version Control & Rollbacks:** Charts are versioned. You can easily upgrade an application to a new version or roll back to a previous stable version if issues arise. Helm manages the history of your releases.
3.  **Parameterization & Customization:** Charts use Go templating and `values.yaml` files. This allows you to customize deployments without modifying the underlying Kubernetes manifests. For example, setting replica counts, image tags, or resource limits via `values.yaml` or `--set` flags.
4.  **Dependency Management:** Charts can declare dependencies on other charts. Helm automatically manages the installation and upgrade order of these dependencies.
5.  **Simplified Application Lifecycle:** Single commands for installing, upgrading, rolling back, and deleting complex applications.

**Production-Level Live Examples (Concise):**

1.  **Installing a Complex Application (e.g., Prometheus Stack):**
    * **Problem:** Deploying Prometheus, Grafana, Alertmanager, and various exporters manually involves dozens of Kubernetes YAML files with intricate dependencies.
    * **Helm Solution:**
        ```bash
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo update
        helm install my-monitoring prometheus-community/kube-prometheus-stack \
          --namespace monitoring --create-namespace \
          --set grafana.ingress.enabled=true \
          --set prometheus.prometheusSpec.serviceMonitorSelectorNilUsesLabels=false
        ```
    * **Impact:** A single command deploys a fully functional, highly integrated monitoring solution, correctly configured across multiple components. Customizations are easily applied via `--set` or a `values.yaml` file.

2.  **Managing Application Upgrades and Rollbacks:**
    * **Problem:** A new version of your microservice (e.g., `my-api:v2.0`) is released, but it introduces a critical bug.
    * **Helm Solution (Upgrade):**
        ```bash
        helm upgrade my-api ./my-api-chart --set image.tag=v2.0
        ```
    * **Helm Solution (Rollback):** After detecting the bug, inspect release history:
        ```bash
        helm history my-api
        # Look for the previous good revision number, e.g., 1
        helm rollback my-api 1
        ```
    * **Impact:** Updates are performed efficiently with Helm's rolling update capabilities. If issues arise, reverting to a known stable state is quick and reliable, minimizing downtime.

3.  **Environment-Specific Configuration:**
    * **Problem:** Your `backend-service` needs different database URLs and replica counts for `dev`, `staging`, and `prod` environments.
    * **Helm Solution:** Create environment-specific `values.yaml` files:
        * `values-dev.yaml`: `databaseUrl: "dev-db.example.com"`, `replicaCount: 1`
        * `values-prod.yaml`: `databaseUrl: "prod-db.example.com"`, `replicaCount: 5`
        ```bash
        # Deploy to dev
        helm install backend-dev ./backend-chart -f values-dev.yaml --namespace dev
        # Deploy to prod
        helm install backend-prod ./backend-chart -f values-prod.yaml --namespace prod
        ```
    * **Impact:** Use the same chart definition across all environments, with environment-specific configurations injected at deployment time. This prevents configuration errors and ensures consistency.

In summary, Helm acts as a powerful packaging and deployment tool for Kubernetes, enabling standardized, version-controlled, and easily manageable application deployments across diverse environments, crucial for production operations.


# ---------------------------------------------------------------------------- #
#                               create helm chart                              #
# ---------------------------------------------------------------------------- #

A Helm chart packages Kubernetes applications for easy deployment. To create one for production, you'll go beyond the basics, focusing on best practices for configurability, maintainability, and reusability.

Here's how to create a production-ready Helm chart, concisely:

**1. Create the Chart Scaffold:**

Start with the basic structure:

```bash
helm create my-prod-app
```

This generates:
* `Chart.yaml`: Chart metadata.
* `values.yaml`: Default configuration values.
* `charts/`: For dependencies (subcharts).
* `templates/`: Kubernetes manifest templates.
* `templates/NOTES.txt`: Post-install instructions.
* `.helmignore`: Files to exclude from the chart package.

**2. Production-Level `Chart.yaml`:**

Beyond basic name/version, add:

```yaml
# my-prod-app/Chart.yaml
apiVersion: v2
name: my-prod-app
description: A Helm chart for my production-grade web application
type: Application # Or 'library' for reusable components
version: 0.1.0
appVersion: "1.2.0" # Version of your application
kubeVersion: ">=1.19.0-0" # Minimum K8s version required
keywords:
  - web
  - production
  - microservice
home: https://mycompany.com/my-prod-app # Project URL
sources:
  - https://github.com/mycompany/my-prod-app # Source code URL
maintainers:
  - name: DevOps Team
    email: devops@mycompany.com
dependencies: # If your app relies on other charts (e.g., Redis, PostgreSQL)
  - name: redis
    version: 17.x.x
    repository: https://charts.bitnami.com/bitnami
    condition: redis.enabled # Only include if redis.enabled is true in values
```
**Production Considerations:** `appVersion`, `kubeVersion`, `keywords`, `home`, `sources`, `maintainers` improve discoverability and documentation. `dependencies` manage complex application stacks.

**3. Production-Ready `values.yaml`:**

Centralize all configurable options. Use nested structures for clarity.

```yaml
# my-prod-app/values.yaml
replicaCount: 3 # Default replicas for prod HA

image:
  repository: mycompany/my-prod-app
  tag: 1.2.0 # Use fixed tags for production deployments
  pullPolicy: IfNotPresent # Or Always for development

service:
  type: ClusterIP # Default for internal communication
  port: 80
  targetPort: 8080 # Application's actual listening port

ingress:
  enabled: true # Enable Ingress by default for external access
  className: nginx
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: "10m" # Production-specific settings
  host: my-prod-app.mycompany.com
  path: /
  pathType: Prefix

resources: # Sensible defaults for prod, can be overridden
  limits:
    cpu: 500m
    memory: 1Gi
  requests:
    cpu: 200m
    memory: 512Mi

autoscaling: # HPA configuration
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

environment: # Application-specific environment variables
  logLevel: INFO
  featureFlags: "A,B"

persistence: # For stateful applications
  enabled: false # Disabled by default for stateless apps
  size: 10Gi
  storageClassName: standard-rwx # Use a defined storage class

# Example for optional dependency (redis)
redis:
  enabled: false # Enable only if needed
  auth:
    enabled: true
    existingSecret: my-redis-secret

nodeSelector: {}
tolerations: []
affinity: {}
```
**Production Considerations:**
* **Sensible Defaults:** Provide values that are reasonable for a production setup (e.g., `replicaCount`, `resources`).
* **Fixed Tags:** Use specific image tags (`1.2.0`) instead of `latest` for stability.
* **Resource Management:** Include `resources` for QoS and scheduling.
* **Ingress/Service Configuration:** Expose common network settings.
* **Autoscaling:** Pre-configure HPA for elasticity.
* **Environment Variables:** Provide common app configs.
* **Persistence:** Include options for stateful components.
* **Node/Pod Affinity/Tolerations:** Expose options for advanced scheduling.
* **Conditional Dependencies:** Use `condition` to enable/disable subcharts.

**4. Production-Grade `templates/`:**

Use Go templating effectively to render Kubernetes manifests based on `values.yaml`.

```yaml
# my-prod-app/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "my-prod-app.fullname" . }}
  labels:
    {{- include "my-prod-app.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "my-prod-app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "my-prod-app.selectorLabels" . | nindent 8 }}
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          env:
            {{- range $key, $value := .Values.environment }} # Loop through environment map
            - name: {{ $key | upper }}
              value: {{ $value | quote }}
            {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }} # Inject resource limits/requests
          {{- with .Values.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.persistence.enabled }} # Conditional volume for stateful apps
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: {{ include "my-prod-app.fullname" . }}-pvc
      {{- end }}
```

**Production Considerations:**
* **Helpers (`_helpers.tpl`):** Use `{{ include "chart.name" . }}` for consistent naming and labels (defined in `_helpers.tpl`).
* **Conditional Rendering:** Use `{{- if .Values.ingress.enabled }}` to include/exclude resources based on `values.yaml`.
* **YAML Piping (`toYaml | nindent`):** Safely inject complex YAML structures from `values.yaml`.
* **Loops (`range`):** Dynamically create environment variables, ports, etc.
* **Volume Mounts:** Support persistence if applicable.
* **Advanced Scheduling:** Include placeholders for `nodeSelector`, `affinity`, `tolerations` to allow users to specify.

**5. Add Ingress and HPA (if applicable):**

Create `ingress.yaml` and `hpa.yaml` in the `templates/` directory, using `values.ingress` and `values.autoscaling` respectively, and conditionally render them.

**6. Testing and Linting:**

Before deploying:

```bash
helm lint ./my-prod-app # Check for common issues
helm template my-prod-app ./my-prod-app --debug # Render manifests
```

**7. Packaging and Distribution:**

```bash
helm package ./my-prod-app
```
This creates `my-prod-app-0.1.0.tgz`. You can then host this in a Helm repository.

**Real-Time Production Example:**

Imagine deploying a microservices architecture. Your main application chart (`my-prod-app`) might conditionally enable and configure subcharts like `redis` and `postgresql` for its data stores, ensuring they are deployed together and configured correctly for the specific environment (dev, staging, prod) through `values.yaml` overrides. This centralized management simplifies complex deployments, enabling consistent and repeatable infrastructure across environments.

By following these practices, your Helm charts become robust tools for managing complex production applications in Kubernetes.

deploy chart
# ---------------------------------------------------------------------------- #
#                              helmchart templates                             #
# ---------------------------------------------------------------------------- #
Helm chart templates are powerful tools for defining Kubernetes resources dynamically. They allow you to create flexible, reusable, and configurable deployments for your applications. Here's how they are used at a production level, with concise examples:

### **Helm Chart Templates in Production**

Helm templates use Go templating language to render Kubernetes YAML manifests. This enables:

1.  **Parameterization:** Externalizing values to make charts reusable.
2.  **Conditional Logic:** Including or excluding resources based on configuration.
3.  **Iteration:** Generating multiple similar resources.
4.  **Helper Functions:** Reusing common YAML snippets.

### **Production-Level Live Examples**

#### **1. `values.yaml` for Configuration**

This is the primary way to customize a Helm chart without modifying the templates directly.

**Example: Defining Image and Replicas**

```yaml
# my-app/values.yaml
replicaCount: 3
image:
  repository: mycompany/my-app
  tag: v1.2.0
  pullPolicy: IfNotPresent
```

#### **2. `_helpers.tpl` for Reusable Logic**

Centralize common labels, names, and functions to maintain consistency and reduce repetition.

**Example: Defining Common Labels**

```yaml
# my-app/templates/_helpers.tpl
{{/*
Common labels
*/}}
{{- define "my-app.labels" -}}
helm.sh/chart: {{ include "my-app.chart" . }}
app.kubernetes.io/name: {{ include "my-app.name" . }}
app.kubernetes.io/instance: {{ .Release.Name }}
app.kubernetes.io/managed-by: {{ .Release.Service }}
{{- end }}
```

#### **3. `deployment.yaml` with Template Functions**

This manifest uses values from `values.yaml` and helpers.

**Example: Dynamic Deployment based on `values.yaml`**

```yaml
# my-app/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "my-app.fullname" . }} # Uses a helper for full name
  labels:
    {{- include "my-app.labels" . | nindent 4 }} # Uses helper for common labels
spec:
  replicas: {{ .Values.replicaCount }} # From values.yaml
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "my-app.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        {{- include "my-app.labels" . | nindent 8 }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}" # Image from values.yaml
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
```

#### **4. Conditional Resources**

Use `if` statements to include or exclude resources based on a flag in `values.yaml`.

**Example: Ingress based on `values.yaml` flag**

```yaml
# my-app/values.yaml
ingress:
  enabled: true
  host: myapp.example.com
```

```yaml
# my-app/templates/ingress.yaml
{{- if .Values.ingress.enabled }} # Only create if ingress.enabled is true
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ include "my-app.fullname" . }}
  labels:
    {{- include "my-app.labels" . | nindent 4 }}
spec:
  rules:
    - host: {{ .Values.ingress.host }} # Host from values.yaml
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: {{ include "my-app.fullname" . }}
                port:
                  number: 80
{{- end }}
```

#### **5. Iteration (`range`) for Multiple Resources**

Useful for creating multiple secrets, configmaps, or service ports.

**Example: Multiple Environment Variables from `values.yaml`**

```yaml
# my-app/values.yaml
env:
  - name: API_KEY
    value: "supersecretkey"
  - name: DB_HOST
    value: "mydb.example.com"
```

```yaml
# my-app/templates/deployment.yaml (snippet inside container spec)
        env:
        {{- range .Values.env }} # Iterate over env list
          - name: {{ .name }}
            value: {{ .value | quote }} # Quote values to handle special characters
        {{- end }}
```

These examples demonstrate how Helm chart templates enable dynamic, configurable, and maintainable deployments for production applications in Kubernetes.